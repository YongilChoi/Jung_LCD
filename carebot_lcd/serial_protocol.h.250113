// serial_protocol.h
#ifndef SERIAL_PROTOCOL_H
#define SERIAL_PROTOCOL_H

#include <Arduino.h>
#include <stdint.h>
#include <time.h>



// SD 카드 사용 (LCD 보드에서만 활성화)
#ifdef BOARD_TYPE_LCD
#include <SD.h>
#define USE_SD
#endif

// 디버그 출력 활성화

// Serial 통신 설정
#define PROTOCOL_SERIAL Serial2
#define PROTOCOL_BAUD 115200
#define PROTOCOL_TX 15  // 실제 사용할 핀 번호로 변경
#define PROTOCOL_RX 16  // 실제 사용할 핀 번호로 변경

// 타이머 설정
#define HELLO_INTERVAL_MS 3000
#define CONNECTION_TIMEOUT_MS 10000
#define RANDOM_EVENT_INTERVAL 5000

// Message Types
#define MSG_HELLO           0x01
#define MSG_HELLO_ACK      0x02
#define MSG_SYSTEM_STATUS   0x03
#define MSG_SENSOR_DATA     0x04
#define MSG_BUTTON_EVENT    0x05
#define MSG_WIFI_STATUS     0x06
#define MSG_TIME_SYNC       0x07
#define MSG_MOTOR_STATUS    0x08
#define MSG_REQUEST         0x09
#define MSG_RESPONSE        0x0A
#define MSG_EVENT           0x0B

// 이벤트 타입 정의
#define EVENT_SENSOR_COVER    0x01
#define EVENT_SENSOR_URINE    0x02
#define EVENT_SENSOR_WEIGHT   0x03
#define EVENT_SENSOR_GAS      0x04
#define EVENT_SENSOR_BATTERY  0x05
#define EVENT_BUTTON_PRESS    0x06
#define EVENT_BUTTON_RELEASE  0x07
#define EVENT_MOTOR_STATE     0x08
#define EVENT_WIFI_CHANGE     0x09
#define EVENT_ERROR           0x0A

// Request Types
#define REQ_SYSTEM_STATUS   0x01
#define REQ_SENSOR_STATUS   0x02
#define REQ_MOTOR_CONTROL   0x03
#define REQ_WIFI_STATUS     0x04

// Button IDs
#define BUTTON_MOTOR_MANUAL  1
#define BUTTON_MOTOR_STOP    2
#define BUTTON_DRYER         3
#define BUTTON_MENU          4

// Motor Commands
#define MOTOR_CMD_START     0x01
#define MOTOR_CMD_STOP      0x02
#define MOTOR_CMD_MANUAL    0x03
#define MOTOR_CMD_AUTO      0x04

// Motor Status
#define MOTOR_STATUS_STOP    0x00
#define MOTOR_STATUS_RUNNING 0x01
#define MOTOR_STATUS_ERROR   0x02

// Message Flags
#define FLAG_SAVE_TO_SD     0x80
#define FLAG_RESPONSE       0x40
#define FLAG_ERROR          0x20
#define FLAG_URGENT         0x10

// System Status Flags
#define SYS_FLAG_NORMAL     0x00
#define SYS_FLAG_ERROR      0x01
#define SYS_FLAG_WARNING    0x02
#define SYS_FLAG_MAINTAIN   0x03

// Pin Definitions (실제 핀 번호로 변경 필요)
// Serial2 pins for ESP32-S3

// Board specific pins
#ifdef BOARD_TYPE_MAIN
// Serial2 통신용 핀
#define PIN_TX2         PIN_SERIAL2_TX
#define PIN_RX2         PIN_SERIAL2_RX

// 버튼 핀
#define PIN_BUTTON_MOTOR_MANUAL  GPIO_NUM_1   // 실제 핀 번호로 변경
#define PIN_BUTTON_MOTOR_STOP    GPIO_NUM_2   // 실제 핀 번호로 변경
#define PIN_BUTTON_DRYER         GPIO_NUM_3   // 실제 핀 번호로 변경
#define PIN_BUTTON_MENU          GPIO_NUM_4   // 실제 핀 번호로 변경

// 센서 핀
#define PIN_COVER_SENSOR         GPIO_NUM_5   // 실제 핀 번호로 변경
#define PIN_URINE_SENSOR         GPIO_NUM_6   // 실제 핀 번호로 변경
#define PIN_WEIGHT_SENSOR        GPIO_NUM_7   // 실제 핀 번호로 변경
#define PIN_GAS_SENSOR          GPIO_NUM_8    // 실제 핀 번호로 변경
#define PIN_BATTERY_LEVEL        GPIO_NUM_9   // 실제 핀 번호로 변경

#else  // BOARD_TYPE_LCD
// Serial2 통신용 핀
#define PIN_TX2         PIN_SERIAL2_TX
#define PIN_RX2         PIN_SERIAL2_RX

// 센서 임계값 정의
#define WEIGHT_THRESHOLD_HIGH   1000.0f  // 1000g
#define WEIGHT_THRESHOLD_LOW    10.0f    // 10g
#define GAS_WARNING_LEVEL      500.0f    // 500ppm
#define GAS_DANGER_LEVEL       800.0f    // 800ppm
#define BATTERY_LOW_THRESHOLD   20.0f    // 20%
#define BATTERY_CRITICAL       10.0f     // 10%

// SD 카드 관련
//#define SD_CHIP_SELECT     5     // SD 카드 CS 핀 (실제 사용하는 핀으로 변경 필요)
#define SD_CHIP_SELECT     10     // SD 카드 CS 핀 (실제 사용하는 핀으로 변경 필요)


// LCD 관련 핀은 여기에 추가
// ... LCD 핀 정의 ...
#endif
#pragma pack(push, 1)
// 기본 메시지 헤더
typedef struct {
    uint8_t start_marker;   // 시작 마커 (0xFF)
    uint8_t type;          // 메시지 타입
    uint8_t flags;         // 메시지 플래그
    uint32_t timestamp;    // Unix timestamp
    uint16_t seq_num;      // 시퀀스 번호
    uint16_t length;       // 페이로드 길이
} MessageHeader;

// Hello 메시지
typedef struct {
    MessageHeader header;
    uint8_t board_type;
    uint8_t reserved[3];
    uint8_t checksum;
} HelloMessage;

// 시스템 상태 메시지
typedef struct {
    MessageHeader header;
    char hw_version[8];
    char sw_version[8];
    char serial_num[16];
    uint8_t sys_status;
    uint8_t error_code;
    uint8_t reserved[2];
    uint8_t checksum;
} SystemStatusMessage;

// 센서 데이터 메시지
typedef struct {
    MessageHeader header;
    bool cover_sensor;
    bool urine_sensor;
    float weight_sensor;
    float gas_sensor;
    uint8_t battery_level;
    uint8_t reserved[3];
    uint8_t checksum;
} SensorDataMessage;

// WiFi 상태 메시지
typedef struct {
    MessageHeader header;
    bool connected;
    char ssid[32];
    char pw[32];
    char ip_addr[16];
    char gateway[16];
    uint8_t signal_strength;
    uint8_t reserved;
    uint8_t checksum;
} WifiStatusMessage;

// 버튼 이벤트 메시지
typedef struct {
    MessageHeader header;
    uint8_t button_id;
    bool pressed;
    uint8_t reserved[2];
    uint8_t checksum;
} ButtonEventMessage;

// 모터 상태/제어 메시지
typedef struct {
    MessageHeader header;
    uint8_t motor_cmd;
    uint8_t motor_status;
    uint8_t motor_speed;
    uint8_t reserved;
    uint8_t checksum;
} MotorMessage;

// 요청 메시지
typedef struct {
    MessageHeader header;
    uint8_t request_type;
    uint8_t request_param;
    uint8_t reserved[2];
    uint8_t checksum;
} RequestMessage;

typedef struct {
    MessageHeader header;
    uint8_t event_type;     // 이벤트 타입
    uint8_t event_source;   // 이벤트 소스 (센서/버튼 ID 등)
    union {
        struct {
            uint8_t state;  // On/Off 상태
        } digital;
        struct {
            float value;    // 아날로그 값
        } analog;
        struct {
            uint8_t button_id;
            uint8_t state;
        } button;
        struct {
            uint8_t error_code;
            uint8_t detail;
        } error;
    } data;
    uint8_t reserved[2];    // 정렬을 위한 예약 필드
    uint8_t checksum;
} EventMessage;

#pragma pack(pop)

// 전역 상태 구조체
typedef struct {
    // 통신 상태
    uint8_t board_type;
    uint16_t sequence_number;
    bool peer_connected;
    uint32_t last_hello_time;
    uint32_t last_received_time;
    uint32_t last_random_event;
    bool initial_status_sent;
    
    // 시스템 상태
    bool wifi_connected;
    uint8_t sys_status;
    uint8_t error_code;
    
    // 모터 상태
    uint8_t motor_status;
    uint8_t motor_speed;
    
    // 센서 상태
    bool cover_sensor;
    bool urine_sensor;
    float weight_sensor;
    float gas_sensor;
    uint8_t battery_level;
    
    // 버튼 상태
    bool button_states[4];
    uint32_t last_debounce_time[4];
    //#ifdef BOARD_TYPE_LCD
    bool sd_initialized;     // SD 카드 초기화 상태
    bool sd_available;       // SD 카드 사용 가능 상태
    //#endif
} GlobalState;

// Arduino setup 및 loop 함수
//void setup();
//void loop();

// 초기화 함수
bool protocol_init();
bool serial_init();
#ifdef BOARD_TYPE_MAIN
void init_buttons();
void init_sensors();
#endif

// 프로토콜 태스크 함수
void protocol_task();
void check_connection();
void generate_random_event();

void print_timestamp(uint32_t timestamp);
char* format_timestamp(uint32_t timestamp, char* buffer, size_t size);

// Message 출력 함수
void print_message(void* message);
void print_message_type(uint8_t type);

// 메시지 전송 함수
extern bool send_message(void* message, size_t size);
void send_hello();
void send_system_status();
void send_wifi_status();
void send_wifi_conn_info(char *ssid, const char *pw);
void send_sensor_data(bool save_to_sd);
void send_motor_status();
void send_button_event(uint8_t button_id, bool pressed);

void encode_sensor_event(uint8_t sensor_type, float value);
void encode_button_event(uint8_t button_id, bool pressed);
void encode_error_event(uint8_t error_code, uint8_t detail);
bool decode_event_message(EventMessage* msg, char* output, size_t output_size);

// 메시지 수신 및 처리 함수
void handle_received_data(uint8_t* data, size_t length);
void process_message(void* message);
extern uint8_t calculate_checksum(void* message, size_t size);
bool verify_checksum(void* message, size_t size);

#ifdef BOARD_TYPE_MAIN
// Main 보드 전용 함수
void check_buttons();
void check_sensors();
void handle_motor_control(uint8_t command);
void update_motor_status(uint8_t status, uint8_t speed);
void start_motor(uint8_t mode);
void stop_motor();
void start_drying_cycle();
#endif

#ifdef BOARD_TYPE_LCD
// LCD 보드 전용 함수
bool check_sd_card();
bool save_to_sd(const char* filename, void* data, size_t size);
void update_system_status_display(SystemStatusMessage* msg);
void update_sensor_display(SensorDataMessage* msg);
void update_button_status_display(ButtonEventMessage* msg);
void update_wifi_status_display(WifiStatusMessage* msg);
void update_motor_status_display(MotorMessage* msg);
void toggle_menu_display();
void show_menu();
void hide_menu();
#endif

// 함수 선언
bool init_wifi(void);
//bool init_time(void);
void check_wifi_status(void);
void update_system_time(void);

void print_hex_dump(const uint8_t* data, size_t length);
void decode_message_header(const MessageHeader* header);


// 디버그 매크로


// 전역 상태 변수
extern GlobalState g_state;

#endif // SERIAL_PROTOCOL_H
