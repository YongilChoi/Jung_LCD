#include "pins_arduino.h"
#include "lv_demo_widgets.h"
#include <Arduino_GFX_Library.h>
#include <SPI.h>
#include "nanum_gothic_16.h"
#include "FS.h"
#include "SD.h"
#include <Arduino.h>
//#include <time.h>
//#include <WiFi.h>
//#include <Preferences.h>
//#include <nvs_flash.h>
//#include "ff.h"

#include "esp_log.h"
#include "common.h"
#include "uart_simulation.h"
#include "serial_protocol.h"
#include "menu.h"
#include "audio.h"

#define SD_FAT_DEBUG 2 // 디버깅 레벨 설정
#define BOARD_TYPE_LCD
#define DEBUG_ENABLED

// 한글 폰트 파일을 배열로 포함 (예: NanumGothic.ttf를 변환한 경우)
LV_FONT_DECLARE(nanum_gothic_16);
// 폰트 데이터를 저장할 구조체

//Arduino_GFX *gfx = create_default_Arduino_GFX();

lv_obj_t * hygera;
lv_obj_t * motor;
lv_obj_t * error;
lv_obj_t * feces;
lv_obj_t * connect;
lv_obj_t * diaper;
lv_obj_t * menuimg;
lv_obj_t * tank;
lv_obj_t * power;
lv_obj_t * wifi;
lv_obj_t * bat;

lv_obj_t* time_label;
lv_obj_t* date_label;
lv_obj_t* water_level_label;

lv_obj_t *main_screen;

lv_obj_t *waiting_screen = NULL;

#if 1
int cover_OPEN = 0;

int motor_ON = 0;
int wifi_ON = 0;
int error_ON = 0;
int urine_ON = 0;
int connect_ON = 0;
int diaper_ON = 0;
int fulllevel_ON = 0;

int power_ON = 0;
#endif

lv_obj_t *header_label;
lv_obj_t *header_label_back;

lv_style_t style_list;
lv_style_t style_header;
lv_style_t style_header_18;
lv_style_t style_header_18_2;

void initial_cb_2(void);

lv_obj_t* msg_top_img_check;
lv_obj_t* close_btn_img;
lv_obj_t* msg_label;
lv_obj_t* label_hema;
lv_obj_t* btn_hema;
lv_obj_t* alert_msgbox;

lv_obj_t * panel0;
int menu_ON = 0;

const char *TAG = "img_decoder";

disp_size_t disp_size;

const lv_font_t * font_large;
const lv_font_t * font_normal;

void waiting_event_handler(char* status);
//static lv_style_t style_panel;

int water_level; 

static void init_styles(void);

// 전역 변수로 시간 레이블 선언
lv_obj_t * datetime_label;

//File file;

static int16_t* buffer;
static uint8_t header[44];

char timestamp_decode[LENGTH_TIMESTAMP];
char timestamp_display[LENGTH_TIMESTAMP];

#if LV_MEM_CUSTOM == 0 && LV_MEM_SIZE < (38ul * 1024ul)
    #error Insufficient memory for lv_demo_widgets. Please set LV_MEM_SIZE to at least 38KB (38ul * 1024ul).  48KB is recommended.
#endif

/**********************
 *      TYPEDEFS
 **********************/

// 이미지 디스크립터를 동적으로 관리하기 위한 구조체
typedef struct {
    lv_img_dsc_t img_dsc;
    uint16_t* data;  // 이미지 데이터를 저장할 포인터
} img_resource_t;

void lv_demo_widgets(void)
{  

    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
    else disp_size = DISP_LARGE;

    font_large = LV_FONT_DEFAULT;
    font_normal = LV_FONT_DEFAULT;

    lv_coord_t tab_h;
    if(disp_size == DISP_LARGE) {
        tab_h = 70;
#if LV_FONT_MONTSERRAT_24
        font_large     = &lv_font_montserrat_24;
#else
        LV_LOG_WARN("LV_FONT_MONTSERRAT_24 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
#endif
#if LV_FONT_MONTSERRAT_16
        font_normal    = &lv_font_montserrat_16;
#else
        LV_LOG_WARN("LV_FONT_MONTSERRAT_16 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
#endif
    }
    else if(disp_size == DISP_MEDIUM) {
        tab_h = 45;
#if LV_FONT_MONTSERRAT_20
        font_large     = &lv_font_montserrat_20;
#else
        LV_LOG_WARN("LV_FONT_MONTSERRAT_20 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
#endif
#if LV_FONT_MONTSERRAT_14
        font_normal    = &lv_font_montserrat_14;
#else
        LV_LOG_WARN("LV_FONT_MONTSERRAT_14 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
#endif
    }
    //// disp_size == DISP_SMALL 
    else {   
        tab_h = 45;
#if LV_FONT_MONTSERRAT_18
        font_large     = &lv_font_montserrat_18;
#else
        LV_LOG_WARN("LV_FONT_MONTSERRAT_18 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
#endif
#if LV_FONT_MONTSERRAT_12
        font_normal    = &lv_font_montserrat_12;
#else
        LV_LOG_WARN("LV_FONT_MONTSERRAT_12 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
#endif
    }

#if LV_USE_THEME_DEFAULT
    lv_theme_default_init(NULL, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), LV_THEME_DEFAULT_DARK,
                          font_normal);
#endif

    panel0 = lv_obj_create(NULL);    
    //lv_obj_add_style(panel0, &style_panel, 0);   
    // 부모 객체도 클릭 가능하도록 설정
    //lv_obj_add_flag(panel0, LV_OBJ_FLAG_CLICKABLE);

    Serial.println("+++ BEFORE lv_scr_load(panel0)");

    lv_scr_load(panel0);

    menu_ON = 0;
   
    lv_bmp_init();  

    lv_obj_t * bgimg = lv_img_create(panel0);
    if (bgimg == NULL) {
        Serial.println("+++ Failed to create image object bgimg");
        return;
    }


    lv_img_set_src(bgimg, &img_bg);

    // 기본 속성 설정
    //lv_obj_set_style_img_recolor_opa(icn_01, LV_OPA_TRANSP, 0);
    lv_obj_set_style_img_opa(bgimg, LV_OPA_COVER, 0);
    
    //lv_obj_center(bgimg);

    Serial.printf("LV_HOR_RES: %d, LV_VER_RES: %d \n", LV_HOR_RES, LV_VER_RES);

    //lv_obj_set_size(bgimg, LV_HOR_RES, LV_VER_RES);

    // 이미지 로드 전 상태 설정
    lv_obj_set_pos(bgimg, 0, 0);
    //lv_obj_set_style_transform_zoom(bgimg, 256, 0);  // 1x 줌
    //lv_obj_set_style_transform_angle(icn_01, 0, 0);   // 0도 회전
    
    //lv_obj_add_style(icn_01, &style_panel, 0);   

    //lv_obj_add_event_cb(icn_01, img_click_event_cb_icn01, LV_EVENT_CLICKED, NULL);  
    //lv_obj_add_flag(icn_01, LV_OBJ_FLAG_CLICKABLE);    

    hygera = lv_img_create(panel0);
    if (hygera == NULL) {
        Serial.println("+++ Failed to create image object hygera");
        return;
    }
    
    lv_img_set_src(hygera, &img_hygera);

    lv_obj_set_pos(hygera, 10, 25);

    motor = lv_img_create(panel0);
    if (motor == NULL) {
        Serial.println("+++ Failed to create image object motor");
        return;
    }

    lv_img_set_src(motor, &img_motor_off);

    lv_obj_set_pos(motor, 30, 70);
 
    lv_obj_t *motor_label = lv_label_create(panel0);
    lv_obj_set_style_text_font(motor_label, &nanum_gothic_16, 0);

    lv_label_set_text(motor_label, "모터작동");
    lv_obj_set_style_border_color(motor_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(motor_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(motor_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(motor_label, 70, 20);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_set_pos(motor_label, 20, 130);

    lv_obj_t * error = lv_img_create(panel0);
    if (error == NULL) {
        Serial.println("+++ Failed to create image object error");
        return;
    }

    lv_img_set_src(error, &img_error_off);
    //lv_img_set_src(error, &img_error_on);
    lv_obj_set_pos(error, 115, 70);

    /////
    lv_obj_t *error_label = lv_label_create(panel0);
    lv_obj_set_style_text_font(error_label, &nanum_gothic_16, 0);

    lv_label_set_text(error_label, "작동오류");
    lv_obj_set_style_border_color(error_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(error_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(error_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(error_label, 70, 20);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_set_pos(error_label, 105, 130);

    feces = lv_img_create(panel0);
    if (feces == NULL) {
        Serial.println("+++ Failed to create image object feces");
        return;
    }

    lv_img_set_src(feces, &img_feces_off);

    lv_obj_set_pos(feces, 200, 70);

    lv_obj_t *feces_label = lv_label_create(panel0);
    lv_obj_set_style_text_font(feces_label, &nanum_gothic_16, 0);

    lv_label_set_text(feces_label, "배변감지");
    lv_obj_set_style_border_color(feces_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(feces_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(feces_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(feces_label, 70, 20);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_set_pos(feces_label, 190, 130);

    connect = lv_img_create(panel0);
    if (connect == NULL) {
        Serial.println("+++ Failed to create image object connect");
        return;
    }

    lv_img_set_src(connect, &img_connect_off);
    lv_obj_set_pos(connect, 285, 70);

    lv_obj_t *connect_label = lv_label_create(panel0);
    lv_obj_set_style_text_font(connect_label, &nanum_gothic_16, 0);

    lv_label_set_text(connect_label, "서버연결");
    lv_obj_set_style_border_color(connect_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(connect_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(connect_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(connect_label, 70, 20);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_set_pos(connect_label, 275, 130);

    lv_obj_t * diaper = lv_img_create(panel0);
    if (diaper == NULL) {
        Serial.println("+++ Failed to create image object diaper");
        return;
    }
  
    lv_img_set_src(diaper, &img_diaper_off);
    lv_obj_set_pos(diaper, 100, 170);

    lv_obj_t *diaper_label = lv_label_create(panel0);
    lv_obj_set_style_text_font(diaper_label, &nanum_gothic_16, 0);

    lv_label_set_text(diaper_label, "기저귀 체결");
    lv_obj_set_style_border_color(diaper_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(diaper_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(diaper_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(diaper_label, 100, 20);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_set_pos(diaper_label, 70, 230);

    lv_obj_t * menuimg = lv_img_create(panel0);
    if (menuimg == NULL) {
        Serial.println("+++ Failed to create image object menuimg");
        return;
    }

    lv_img_set_src(menuimg, &img_menu_off);
    
    lv_obj_set_pos(menuimg, 220, 170);
    lv_obj_add_event_cb(menuimg, img_click_event_cb_menuimg, LV_EVENT_CLICKED, NULL);
    lv_obj_add_flag(menuimg, LV_OBJ_FLAG_CLICKABLE);    
     // 이미지의 z-index를 상위로 올리기
    //lv_obj_move_foreground(menuimg); 
    //lv_obj_set_style_pad_all(menuimg, 10, LV_PART_MAIN);
    lv_obj_set_style_anim_time(menuimg, 0, LV_STATE_PRESSED);  // 애니메이션 제거

    lv_obj_t *menuimg_label = lv_label_create(panel0);
    lv_obj_set_style_text_font(menuimg_label, &nanum_gothic_16, 0);

    lv_label_set_text(menuimg_label, "메뉴");
    lv_obj_set_style_border_color(menuimg_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(menuimg_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(menuimg_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(menuimg_label, 70, 20);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_set_pos(menuimg_label, 210, 230);
    /////
 
    // Create a new bar object
    tank = lv_bar_create(panel0);
    lv_obj_set_size(tank, 80, 175);
    lv_obj_set_pos(tank, 370, 75);

    // Set the bar's minimum and maximum values
    lv_bar_set_range(tank, 0, 2200); // Assuming max water level is 2200 ml

    lv_obj_set_style_radius(tank, 0, 0); // Set the corners to be square
    lv_obj_set_style_radius(tank, 0, LV_PART_INDICATOR); // 인디케이터 모서리도 사각형으로

    //lv_bar_set_mode(tank, LV_BAR_MODE_VERTICAL); // Set the bar to be vertical
    lv_bar_set_mode(tank, LV_BAR_MODE_SYMMETRICAL); // Set the bar to be vertical

    lv_obj_set_style_border_color(tank, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(tank, lv_color_white(), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(tank, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    water_level = 0;

    lv_bar_set_value(tank, water_level, LV_ANIM_ON);

    //lv_obj_move_foreground(tank); 
    lv_obj_set_style_bg_opa(tank, LV_OPA_100, 0);

    ///// water_level 값 표시 레이블
    water_level_label = lv_label_create(panel0);
    char water_level_text[20];  // 충분한 크기의 버퍼 생성
    sprintf(water_level_text, "%d ml", water_level);  // 문자열 포매팅
    lv_label_set_text(water_level_label, water_level_text);
    lv_obj_align_to(water_level_label, tank, LV_ALIGN_TOP_MID, 0, 10);
    //lv_obj_set_pos(water_level_label, 385, 65);

    // 레이블 스타일 설정 (불투명도 추가)
    static lv_style_t style_label;
    lv_style_init(&style_label);
    lv_style_set_bg_opa(&style_label, LV_OPA_100);  // 70% 불투명도 설정 
    //lv_style_set_bg_color(&style_label, lv_color_white());  // 배경색 흰색으로 설정
    lv_obj_add_style(water_level_label, &style_label, 0);
    //lv_obj_add_style(tank, &style_label, 0);	

    //lv_obj_add_event_cb(tank, tank_event_cb, LV_EVENT_VALUE_CHANGED, NULL);

    power = lv_img_create(panel0);
    if (power == NULL) {
        Serial.println("+++ Failed to create image object power");
        return;
    }
    
    lv_img_set_src(power, &img_power_off);
    lv_obj_set_pos(power, 340, 25);

    wifi = lv_img_create(panel0);
    if (wifi == NULL) {
        Serial.println("+++ Failed to create image object wifi");
        return;
    }
    
    lv_img_set_src(wifi, &img_wifi_off);
    lv_obj_set_pos(wifi, 380, 21);

	// 클릭 영역을 더 크게 만들기 (선택사항)
    lv_obj_set_style_pad_all(wifi, 5, LV_STATE_DEFAULT);  // 패딩 추가

    lv_obj_add_event_cb(wifi, img_click_event_cb_wifi, LV_EVENT_CLICKED, NULL);  

    //lv_obj_add_event_cb(wifi, img_click_event_cb_menuimg, LV_EVENT_CLICKED, NULL);  
    
    lv_obj_add_flag(wifi, LV_OBJ_FLAG_CLICKABLE); 
    lv_obj_set_style_anim_time(wifi, 0, LV_STATE_PRESSED);  // 애니메이션 제거

    bat = lv_img_create(panel0);
    if (bat == NULL) {
        Serial.println("+++ Failed to create image object bat");
        return;
    }
 
    lv_img_set_src(bat, &img_bat_off);
    lv_obj_set_pos(bat, 420, 25);

  setup_time_display(panel0);

  Serial.println("+++ lv_demo_widgets done");

}

// 시간 업데이트 타이머 콜백 함수
static void update_time(lv_timer_t * timer) {
  
    //lv_label_set_text(datetime_label, datetime_str);
    lv_label_set_text(datetime_label, timestamp_display);
    lv_obj_set_style_border_color(datetime_label, lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_border_width(datetime_label, 1, LV_PART_MAIN | LV_STATE_DEFAULT);

    // 텍스트 중앙 정렬을 위한 코드 추가
    lv_obj_set_style_text_align(datetime_label, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_obj_set_size(datetime_label, 250, 25);  // 객체 크기 설정
    // 객체 자체도 부모 컨테이너 내에서 중앙에 배치하고 싶다면 다음 코드도 추가
    lv_obj_align(datetime_label, LV_ALIGN_TOP_MID, -50, 25); 

}

// lv_demo_widgets() 함수 내에서 시간 표시 부분을 다음과 같이 수정
void setup_time_display(lv_obj_t * parent) {
    // 시간 초기화
    //init_time();
    
    // 날짜/시간 레이블 생성
    datetime_label = lv_label_create(parent);
    lv_obj_set_style_text_font(datetime_label, &nanum_gothic_16, 0);
    //lv_obj_set_pos(datetime_label, 10, 230);
    
    // 초기 시간 표시
    update_time(NULL);
    
    // 1초마다 시간 업데이트하는 타이머 생성
    lv_timer_create(update_time, 1000, NULL);
}

void img_click_event_cb_menuimg(lv_event_t * e)
{
    Serial.println("+++ img_click_event_cb_menuimg \n");
    menu();
}

void initial_cb_1(void) {

  Serial.println("+++ initial_cb_1 initial before");

  menu_ON == 0;

  lv_demo_widgets();
  //lv_scr_load(panel0);

  Serial.println("+++ initial_cb_1 initial after");

    //show_menu_content("Alarm Setup", "Configure system alarm settings...");
}